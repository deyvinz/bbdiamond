version: '3.8'

services:
  # Next.js Application
  app:
    build:
      context: .
      args:
        NEXT_PUBLIC_SUPABASE_URL: ${NEXT_PUBLIC_SUPABASE_URL}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${NEXT_PUBLIC_SUPABASE_ANON_KEY}
        SUPABASE_SERVICE_ROLE: ${SUPABASE_SERVICE_ROLE}
    ports:
      - "8080:3000"
    env_file:
      - .env
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_SUPABASE_URL=${NEXT_PUBLIC_SUPABASE_URL}
      - NEXT_PUBLIC_SUPABASE_ANON_KEY=${NEXT_PUBLIC_SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE=${SUPABASE_SERVICE_ROLE}
      - CACHE_PROVIDER=${CACHE_PROVIDER:-disabled}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_USERNAME=${REDIS_USERNAME}
      - CACHE_NAMESPACE=${CACHE_NAMESPACE}
      - CACHE_GUESTS_TTL_SECONDS=${CACHE_GUESTS_TTL_SECONDS:-120}
      - CACHE_JITTER_SECONDS=${CACHE_JITTER_SECONDS:-20}
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - app-network

  # Redis for caching
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  # SSL is handled by system Nginx (not in Docker)

volumes:
  redis_data:

networks:
  app-network:
    driver: bridge
